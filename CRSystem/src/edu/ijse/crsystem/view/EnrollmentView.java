/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package edu.ijse.crsystem.view;


import edu.ijse.crsystem.Dao.EnrollmentDao;
import edu.ijse.crsystem.Dao.EnrollmentDaoImpl;
import edu.ijse.crsystem.controller.EnrollmentController;
import edu.ijse.crsystem.db.DBConnection;
import edu.ijse.crsystem.dto.EnrollmentDto;


import javax.swing.*;
import java.awt.event.ActionEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.time.LocalDate;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;

public class EnrollmentView extends javax.swing.JFrame {

    /**
     * Creates new form EnrollmentView
     */
    
    private EnrollmentDao enrollmentDao;
    private EnrollmentController enrollmentController;

    
    public EnrollmentView() {
        initComponents();
        try {
            enrollmentDao = new EnrollmentDaoImpl(DBConnection.getInstance().getConnection());
             enrollmentController = new EnrollmentController(enrollmentDao); 
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "DB Error: " + e.getMessage());
        }
        loadStudentIds();
        loadCourseIds();
        initListeners();
        loadEnrollmentTable();
    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        cmbStudentId = new javax.swing.JComboBox<>();
        lblStudentId = new javax.swing.JLabel();
        lblCourse = new javax.swing.JLabel();
        cmbCourse = new javax.swing.JComboBox<>();
        btnEnroll = new javax.swing.JButton();
        btnDrop = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblEnrollment = new javax.swing.JTable();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Enrollment");

        cmbStudentId.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        lblStudentId.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblStudentId.setText("Student ID:");

        lblCourse.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblCourse.setText("Course:");

        cmbCourse.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnEnroll.setBackground(new java.awt.Color(0, 153, 255));
        btnEnroll.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnEnroll.setText("Enroll");

        btnDrop.setBackground(new java.awt.Color(0, 153, 255));
        btnDrop.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnDrop.setText("Drop");

        tblEnrollment.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tblEnrollment);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(190, 190, 190)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(151, 151, 151)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblCourse)
                            .addComponent(lblStudentId)
                            .addComponent(btnEnroll))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cmbStudentId, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cmbCourse, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(33, 33, 33)
                                .addComponent(btnDrop))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 533, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(jLabel1)
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbStudentId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblStudentId))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCourse)
                    .addComponent(cmbCourse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEnroll)
                    .addComponent(btnDrop))
                .addGap(26, 26, 26)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDrop;
    private javax.swing.JButton btnEnroll;
    private javax.swing.JComboBox<String> cmbCourse;
    private javax.swing.JComboBox<String> cmbStudentId;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lblCourse;
    private javax.swing.JLabel lblStudentId;
    private javax.swing.JTable tblEnrollment;
    // End of variables declaration//GEN-END:variables

  private void initListeners() {
        btnEnroll.addActionListener((ActionEvent e) -> handleEnroll());
        btnDrop.addActionListener((ActionEvent e) -> handleDrop());
    }

    private void loadStudentIds() {
        try {
            Connection conn = DBConnection.getInstance().getConnection();
            PreparedStatement stmt = conn.prepareStatement("SELECT StudentId FROM student");
            ResultSet rs = stmt.executeQuery();

            cmbStudentId.removeAllItems();
            while (rs.next()) {
                cmbStudentId.addItem(rs.getString("StudentId"));
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Failed to load students: " + e.getMessage());
        }
    }

    private void loadCourseIds() {
        try {
            Connection conn = DBConnection.getInstance().getConnection();
            PreparedStatement stmt = conn.prepareStatement("SELECT CourseId FROM course");
            ResultSet rs = stmt.executeQuery();

            cmbCourse.removeAllItems();
            while (rs.next()) {
                cmbCourse.addItem(rs.getString("CourseId"));
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Failed to load courses: " + e.getMessage());
        }
    }

    private void handleEnroll() {
        String studentId = cmbStudentId.getSelectedItem().toString();
        String courseId = cmbCourse.getSelectedItem().toString();
        LocalDate today = LocalDate.now();

        try {
            boolean already = enrollmentDao.isEnrolled(studentId, courseId);
            if (already) {
                JOptionPane.showMessageDialog(this, "Student already enrolled in this course.");
                return;
            }

            EnrollmentDto dto = new EnrollmentDto(studentId, courseId, today);
            boolean result = enrollmentDao.enrollStudent(dto);

            if (result) {
                JOptionPane.showMessageDialog(this, "Enrollment successful.");
            } else {
                JOptionPane.showMessageDialog(this, "Enrollment failed.");
            }

        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
        }
    }

    private void handleDrop() {
        String studentId = cmbStudentId.getSelectedItem().toString();
        String courseId = cmbCourse.getSelectedItem().toString();

        try {
            boolean result = enrollmentDao.dropEnrollment(studentId, courseId);

            if (result) {
                JOptionPane.showMessageDialog(this, "Enrollment dropped.");
            } else {
                JOptionPane.showMessageDialog(this, "No such enrollment found.");
            }

        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
        }
    }
    
    public void loadEnrollmentTable() {
    try {
        String[] columns = {"Enrollment Id", "Student Id", "Course Id", "Enrollment Date"};
        DefaultTableModel dtm = new DefaultTableModel(columns, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        tblEnrollment.setModel(dtm);

        ArrayList<EnrollmentDto> enrollments = enrollmentController.getAllEnrollments();
        for (EnrollmentDto enrollment : enrollments) {
            Object[] rowData = {
                enrollment.getEnrollmentId(),
                enrollment.getStudentId(),
                enrollment.getCourseId(),
                enrollment.getEnrollmentDate()
            };
            dtm.addRow(rowData);
        }

    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, e.getMessage());
    }
}

}
